
import:
  java.io.IOException
  java.io.InputStream
  java.net.URI
  java.nio.file.Files
  java.nio.file.Path
  java.io.File
  
  java.nio.file.Paths
  java.util.ArrayList

on script load:
  set {film_editor::version} to 1.1
  Config_load()
  Utils_checkPlugins()

  set {film_editor::server_path} to new File(".").getCanonicalPath()

function Server_getPath() :: string:
  return {film_editor::server_path}

function Render_announce(str: string, message_type: string = "info", prefix: string = "RENDER"):
  Editor_announce({_str}, {_message_type}, {_prefix})

function Editor_announce(str: string, message_type: string = "info", prefix: string = "FILMEDITOR"):
  set {_color} to {film_editor::color}
  if {_message_type} = "error":
    set {_color} to {film_editor::error_color}
  if {_message_type} = "warning":
    set {_color} to "<%{film_editor::config::film_editor::warning_main_color}%>"
  broadcast formatted "%{_color}%[%{_prefix}%] &f%formatConfigString({_str})%"

on server list ping:
  set the motd to formatted "%{film_editor::color}%&lFILMEDITOR %{film_editor::color2}%v%{film_editor::version}%"

on unknown command with priority highest:
  set the unknown command message to "&fUnknown command. Type &b/filmhelp &ffor help."

# Plugin Checker/Updater

function Utils_checkPlugins():
  set {_plugins::*} to loaded plugins
  clear {_notInstalled::*}

  set {_requiredPlugins::*} to "Biosphere2", "SkBee", "SkQuery", "skript-reflect", "SkriptJSON", "Skuishy", "SkHttp"

  set {_requiredPlugins::Biosphere2::download_url} to "https://github.com/bi0qaw/biosphere2/releases/download/1.0.2/biosphere2-1.0.2.jar"
  set {_requiredPlugins::SkBee::download_url} to "https://github.com/ShaneBeee/SkBee/releases/download/3.6.1/SkBee-3.6.1.jar"
  set {_requiredPlugins::SkQuery::download_url} to "https://github.com/SkQuery/SkQuery/releases/download/4.1.10/SkQuery-4.1.10.jar"
  set {_requiredPlugins::skript-reflect::download_url} to "https://github.com/SkriptLang/skript-reflect/releases/download/v2.5.1/skript-reflect-2.5.1.jar"
  set {_requiredPlugins::SkriptJSON::download_url} to "https://github.com/btk5h/skript-json/releases/download/v1.1.1/skript-json-1.1.1.jar"
  set {_requiredPlugins::Skuishy::download_url} to "https://cdn.modrinth.com/data/hqhzEibg/versions/xiJlirQQ/Skuishy-2.8-all.jar"
  set {_requiredPlugins::SkHttp::download_url} to "https://cdn.modrinth.com/data/4PKsHCki/versions/N5RqZp5W/SkHttp-1.5-all.jar"

  Editor_announce(formatConfigValue("messages::dependencies::checking"))

  loop {_requiredPlugins::*}: # Check if all required plugins are installed
    if {_plugins::*} does not contain loop-value:
      add loop-value to {_notInstalled::*}

  if size of {_notInstalled::*} is greater than 0:
    set {_notInstalledString} to join {_notInstalled::*} with ", "
    Editor_announce(formatConfigValue("messages::dependencies::missing", {_notInstalledString}))
    # Auto install
    Editor_announce(formatConfigValue("messages::dependencies::installing"))
    loop {_notInstalled::*}:
      set {_jarName} to {_requiredPlugins::%loop-value%::download_url}
      set {_split::*} to split {_jarName} by "/"
      set {_jarName} to {_split::%size of {_split::*}%}
      Utils_downloadFromURL({_requiredPlugins::%loop-value%::download_url}, "plugins/%{_jarName}%.jar")
      Editor_announce(formatConfigValue("messages::dependencies::installed_dep", loop-value))
    stop

  Editor_announce(formatConfigValue("messages::dependencies::finished"))

function Utils_downloadFromURL(url: string, path: string) :: number:
  set {_download} to URI.create({_url}).toURL().openStream()
  set {_bytes} to Files.copy({_download}, Paths.get({_path}))

# ############# #
# Config Loader #
# ############# #

function Config_load() :: boolean:
  set {_path} to Paths.get("filmeditor/config.json")

  set {_content} to Files.readString({_path})
  map json {_content} to {film_editor::config::*}
  map json {_content} to {_conf::*}

  if {_content} is not set:
    Editor_announce(formatConfigValue("messages::config::does_not_exist"), "error")
    return false

  # Check for invalid metadata
  if {_conf::film_editor::version} is not set:
    Editor_announce(formatConfigValue("messages::config::missing_version"), "error")
    return false
  if {_conf::film_editor::version} is not {film_editor::version}:
    Editor_announce(formatConfigValue("messages::config::incompatible", "%{film_editor::version}%", "%{_conf::film_editor::version}%"), "error")
    return false

  set {film_editor::color} to "<%{_conf::film_editor::main_color}%>"
  set {film_editor::color2} to "<%{_conf::film_editor::secondary_color}%>"
  set {film_editor::error_color} to "<%{_conf::film_editor::error_main_color}%>"
  set {film_editor::error_color2} to "<%{_conf::film_editor::error_secondary_color}%>"

  Editor_announce(formatConfigValue("messages::config::success"))
  return true

command /reloadconfig:
  permission: filmeditor.reloadconfig
  trigger:
    Config_load()